// Author: Tyler Gutowski, tgutowski2020@fit.edu
// Author: Brennan Pike, bpike2020@fit.edu
// Course: CSE 4250, Fall 2022
// Project: Proj2, Manatee Evacuation
// Implementation: rustc 1.57.0 (f1edd0429 2021-11-29)

/*
We used vectors rather than BTreeSet, because vectors give us the ability to use binary_search_by(), or search_by(), which are log(n).
*/


use std::io;
use std::cmp::Ordering;

// Manatee struct
#[derive(Debug, Eq, PartialEq, PartialOrd, Copy, Clone)]
pub struct Manatee {
	size: i32,
	age: i32,
	index: i32
}

// Implementation for sorting the manatees
impl Ord for Manatee {
	fn cmp(&self, other: &Self) -> Ordering {
		// Prioritize age
		if self.age == other.age {
			// Then size
			if self.size == other.size {
				// And lastly index (doesnt matter unless using BTreeSet)
				return self.index.cmp(&other.index);
			}
			return self.size.cmp(&other.size);
		}
		return self.age.cmp(&other.age);
	}
}

// Main function
fn main() -> io::Result<()> {	
	let mut pairs: i32 = 0;
	let mut female_manatees: Vec<Manatee> = Vec::new();
	let mut male_manatees: Vec<Manatee> = Vec::new();
	// Read the first five lines from stdio
	for n in 1..6  {
		// Set the input variable to be a new string
		let mut buffer = String::new();
		// Set the next input equal to the input variable
		io::stdin().read_line(&mut buffer)?;
		let mut buffer_split = buffer.split_whitespace();
		
		match n {
			// Get number of pairs
			1 => pairs = buffer_split.next().expect("found empty string where number expected").parse::<i32>().unwrap(),
			
			// Get female manatee age and add it to the female_manatee_vec
			2 => 
			{
				for i in 0..pairs {
					let ind: i32 = (i+1) as i32;
					let mut empty_manatee = Manatee {
						size: 0,
						age: 0,
						index: ind
					};
					empty_manatee.age = buffer_split.next().expect("found empty string where number expected").parse::<i32>().unwrap();
					female_manatees.push(empty_manatee);
				}
			},
			
			// Get female manatee size
			3 => 
			{
				for manatee in &mut female_manatees {
					manatee.size = buffer_split.next().expect("found empty string where number expected").parse::<i32>().unwrap();
				}
			},
			
			// Get female manatee age and add it to the male_manatee_vec
			4 =>
			{
				for i in 0..pairs {
					let ind: i32 = (i+1) as i32;
					let mut empty_manatee = Manatee {
						size: 0,
						age: 0,
						index: ind
					};
					empty_manatee.age = buffer_split.next().expect("found empty string where number expected").parse::<i32>().unwrap();
					male_manatees.push(empty_manatee);
				}
			},
			
			// Get male manatee size
			5 => {
				for manatee in &mut male_manatees {
					manatee.size = buffer_split.next().expect("found empty string where number expected").parse::<i32>().unwrap();
				}
			},

			// For anything else (which shouldn't occur)
			_ => break,
		}			
	}

	// Sort both vectors of manatees.
	let mut female_answer: Vec<i32> = Vec::new();
	let mut male_answer: Vec<i32> = Vec::new();
	
	// Assume no pair found until one is found
	let mut impossible = false;
	let mut no_pair = true;

	// Sort both lists of manatees
	female_manatees.sort_by(|a, b| a.cmp(b));
	male_manatees.sort_by(|a, b| a.cmp(b));

	// its morbin' time
	for i in 0..female_manatees.len() {
		if !impossible {
			// Get the first manatee in each list
			let first_male = male_manatees[0];
			let first_female = female_manatees[0];
			let youngest_age = first_female.age;
			
			
			// No pair? This manatee might match up with an older manatee.
			// Find the best match for the female, instead.
			let mut best_match = first_male;
			let mut best_index = 0;
			let youngest_age = first_male.age;
			// Finding the best male for the first female is a bit more complex.
			// We want the LARGEST one, but we don't know which is the largest
			// until we've polled them all (of the right age).
			
			// Find a pair for the female
			if !no_pair {
				println!("finding a pair for female of size {} and age {}", first_female.size, first_female.age);
				for j in 0..male_manatees.len() {
					// Change the best male manatee if:
					// its size is smaller than current and
					// its still smaller than the smallest female
					if (best_match.size < male_manatees[j].size && best_match.size < first_female.size) || best_match.size > first_female.size {
						// CHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THISCHECK THIS
						best_match = male_manatees[j];
						best_index = j;
					}
					// Once we find one that's too big or too old, break off.
					if male_manatees[j].age > youngest_age {//|| best_match.size > first_female.size {
						break;
					}
				}

				if best_match.size > first_female.size {
					// There's no good match for this female.
					// The setup is impossible.
					impossible = true;
					break;
				}
				else {
					// Otherwise, add the pairs
					println!("removing female of size {} and age {}", female_manatees[0].size, female_manatees[0].age);
					let female_index = female_manatees.remove(0).index;
					female_answer.push(female_index);
					println!("removing male of size {} and age {}", best_match.size, best_match.age);
					male_manatees.remove(best_index);
					male_answer.push(best_match.index);
					no_pair = false; // We found a pair
				}
			}
			else { // NO PAIR
				// Find a pair for the male
				println!("finding a pair for male of size {} and age {}", first_male.size, first_male.age);
				for j in 0..female_manatees.len() {
					if female_manatees[j].size > first_male.size { // If there is a female manatee that is larger than the male
						println!("removing female of size {} and age {}", female_manatees[j].size, female_manatees[j].age);
						let female_index = female_manatees.remove(j).index; // Put female into answer
						female_answer.push(female_index);
						println!("removing male of size {} and age {}", male_manatees[j].size, male_manatees[j].age);
						let male_index = male_manatees.remove(j).index; // Put male into answer
						male_answer.push(male_index);
						break; // Break. no need to continue!
					}
					// Too old! Not in order anymore. Break and try male to female.
					if female_manatees[j].age > youngest_age { 
						break;
					}
				}
			}
			no_pair = true
		}
	} 
	if impossible {
		println!("impossible");	
	}

	// print indices of manatees
	println!("\nThere are {} female answers", female_answer.len());
	for i in 0..(female_answer.len()) {
		print!("{} ", female_answer[i]);
	}
	println!("\nThere are {} male answers", male_answer.len());
	for i in 0..(male_answer.len()) {
		print!("{} ", male_answer[i]);
	}
	Ok(())
}
